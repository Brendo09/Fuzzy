// Block definition (there may be more than one block per file)
FUNCTION_BLOCK teste

// Define input variables
VAR_INPUT
    Distancia : REAL;
    Velocidade : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    pressao_freio : REAL;
END_VAR

// Fuzzify input variable 'Distancia'
FUZZIFY Distancia
	TERM muito_perto := (0, 1) (20, 0) ; 
    TERM perto := (2, 0) (20, 1) (60,1) (130,0) ; 
    TERM longe := (60, 0) (100,1) (180,1) (350,0);
    TERM muito_longe := (250,0) (350, 1) (500, 1);
END_FUZZIFY

// Fuzzify input variable 'Velocidade'
FUZZIFY Velocidade
	TERM muito_lento := (0,1) (10,0);
    TERM lento := (5, 0) (18, 1) (30,0);
	TERM media := (20,0) (40,1) (45,1) (60,0);
	TERM muito_rapido := (50,0) (65,1) (100,1);
END_FUZZIFY

// Defzzzify output variable 'pressao_freio'
DEFUZZIFY pressao_freio
    TERM muito_fraca := (10,1) (20,0);
    TERM fraca := (10,0) (22,1) (50,0);
    TERM normal := (40,0) (60,1) (80,0);
	TERM forte := (70,0) (90,1) (100,1);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COA;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

	RULE 1: IF Distancia IS muito_perto AND Velocidade IS muito_lento 
               THEN pressao_freio IS muito_fraca; 

	RULE 2: IF Distancia IS perto 
                THEN pressao_freio is fraca;
			   
    RULE 3 : IF Distancia IS perto AND Velocidade IS media
                THEN pressao_freio IS fraca;

    RULE 4 : IF Distancia IS longe and Velocidade is media 
                THEN pressao_freio IS normal; 

    RULE 5 : IF Distancia IS muito_longe and Velocidade is muito_rapido 
                THEN pressao_freio IS forte; 
				
				   

	   
END_RULEBLOCK

END_FUNCTION_BLOCK
